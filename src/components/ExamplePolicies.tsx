import React from 'react';

const examplePolicies = {
    PreventCloudtrailDisable: {
        name: 'PreventCloudtrailDisable',
        description: 'This policy will prevent any user from disabling Cloudtrail',
        statements: ['cloudtrail:DeleteTrail', 
        'cloudtrail:PutEventSelectors', 
        'cloudtrail:StopLogging', 
        'cloudtrail:UpdateTrail'],
        effect: 'Deny',
    },
    PreventLeavingOrg: {
        name: 'PreventLeavingOrganization',
        description: 'Prevent member accounts from leaving the organization',
        statements: ['organizations:LeaveOrganization'],
        effect: 'Deny',
    },
    PreventGuardDutyDisable: {
        name: 'PreventGuardDutyDisable',
        description: 'This SCP prevents users or roles in any affected account from disabling GuardDuty or altering its configuration.',
        statements: ['guardduty:AcceptInvitation',
        'guardduty:ArchiveFindings',
        'guardduty:CreateDetector',
        'guardduty:CreateFilter',
        'guardduty:CreateIPSet',
        'guardduty:CreateMembers',
        'guardduty:CreatePublishingDestination',
        'guardduty:CreateSampleFindings',
        'guardduty:CreateThreatIntelSet',
        'guardduty:DeclineInvitations',
        'guardduty:DeleteDetector',
        'guardduty:DeleteFilter',
        'guardduty:DeleteInvitations',
        'guardduty:DeleteIPSet',
        'guardduty:DeleteMembers',
        'guardduty:DeletePublishingDestination',
        'guardduty:DeleteThreatIntelSet',
        'guardduty:DisassociateFromMasterAccount',
        'guardduty:DisassociateMembers',
        'guardduty:InviteMembers',
        'guardduty:StartMonitoringMembers',
        'guardduty:StopMonitoringMembers',
        'guardduty:TagResource',
        'guardduty:UnarchiveFindings',
        'guardduty:UntagResource',
        'guardduty:UpdateDetector',
        'guardduty:UpdateFilter',
        'guardduty:UpdateFindingsFeedback',
        'guardduty:UpdateIPSet',
        'guardduty:UpdatePublishingDestination',
        'guardduty:UpdateThreatIntelSet'],
        effect: 'Deny',
    },
    DenyAccessToSpecificRole: {
        name: 'DenyAccessToSpecificRole',
        description: 'This SCP will deny access to changes being made on a specific role',
        statements: [    
        'iam:AttachRolePolicy',
        'iam:DeleteRole',
        'iam:DeleteRolePermissionsBoundary',
        'iam:DeleteRolePolicy',
        'iam:DetachRolePolicy',
        'iam:PutRolePermissionsBoundary',
        'iam:PutRolePolicy',
        'iam:UpdateAssumeRolePolicy',
        'iam:UpdateRole',
        'iam:UpdateRoleDescription'
        ],
        effect: 'Deny',
    },
    PreventCloudWatchDisable: {
        name: 'PreventCloudWatchDisable',
        description: 'This SCP will prevent any user from disabling Cloudwatch or altering its configuration.',
        statements: ['cloudwatch:DeleteAlarms',
        'cloudwatch:DeleteDashboards',
        'cloudwatch:DisableAlarmActions',
        'cloudwatch:PutDashboard',
        'cloudwatch:PutMetricAlarm',
        'cloudwatch:SetAlarmState'],
        effect: 'Deny',
    },
    PreventAwsConfigDisable: {
        name: 'PreventAwsConfigDisable',
        description: 'This SCP will prevent any user from disabling AWS Config or changing its rules.',
        statements: ['config:DeleteConfigRule',
        'config:DeleteConfigurationRecorder',
        'config:DeleteDeliveryChannel',
        'config:StopConfigurationRecorder'],
        effect: 'Deny',
    },
    PreventEBSEncryptionDisable: {
        name: 'PreventEBSEncryptionDisable',
        description: 'This SCP will prevent users from disabling the default EBS encryption',
        statements: ['ec2:DisableEbsEncryptionByDefault'],
        effect: 'Deny',
    },
    PreventVPCFlowLogDeletion: {
        name: 'PreventVPCFlowLogDeletion',
        description: 'This SCP will prevent users from deleting VPC flow logs',
        statements: ['ec2:DeleteFlowLogs',
        'logs:DeleteLogGroup',
        'logs:DeleteLogStream'],
        effect: 'Deny',
    },
    PreventVPCGettingInternetAccess: {
        name: 'PreventVPCGettingInternetAccess',
        description: 'This SCP will prevent users or roles from attaching an internet gateway to a VPC',
        statements: ['ec2:AttachInternetGateway',
        'ec2:CreateInternetGateway',
        'ec2:CreateEgressOnlyInternetGateway',
        'ec2:CreateVpcPeeringConnection',
        'ec2:AcceptVpcPeeringConnection',
        'globalaccelerator:Create*',
        'globalaccelerator:Update*'],
        effect: 'Deny',
    }

};

export default examplePolicies;