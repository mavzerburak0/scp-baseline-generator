import { useState, useEffect } from 'react'
import './App.css'
import PolicyForm from './components/PolicyForm';
import {
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  VStack,
  Container,
  IconButton,
  Box,
} from '@chakra-ui/react';
import { CloseIcon, AddIcon } from '@chakra-ui/icons';
import Header from './components/Navbar';
import { CopyBlock, a11yDark } from 'react-code-blocks';


const App: React.FC = () => {
  const [names, setNames] = useState<{ name: string; description: string; targetIds: string[]; services: string[], actions: string[], statements: string[], effect: string, actionChoice: string, resources: string[], conditions: string[] }[]>([
    { name: '', description: '', targetIds: [], services: [], actions: [], statements: [], effect: '', actionChoice: '', resources: ["*"], conditions: []},
  ]);
  const [concatenatedPoliciesTerraform, setConcatenatedPoliciesTerraform] = useState<string>('');
  const [concatenatedPoliciesCloudformation, setConcatenatedPoliciesCloudformation] = useState<string>('');
  const [preWrittenCloudformation] = useState<string>(`
AWSTemplateFormatVersion: '2010-09-09'
Description: "Generated by SCP Baseline Generator"

Resources:`);
  const concatenatedCloudformation = `${preWrittenCloudformation}${concatenatedPoliciesCloudformation}`;
  const showLineNumbers = true;

  const handleNameChange = (name: string, index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].name = name;
      return newNames;
    });
  };

  const handleDescriptionChange = (description: string, index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].description = description;
      return newNames;
    });
  };

  const handleTargetIdsChange = (targetIds: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].targetIds = targetIds;
      return newNames;
    });
  };

  const handleResourcesChange = (resources: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].resources = resources;
      return newNames;
    });
  };

  const handleConditionsChange = (conditions: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].conditions = conditions;
      return newNames;
    });
  };

  const handleServicesChange = (services: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].services = services;
      return newNames;
    });
  };

  const handleActionsChange = (actions: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].actions = actions;
      return newNames;
    });
  };

  const handleStatementsChange = (statements: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].statements = statements;
      return newNames;
    });
  }

  const handleEffectChange = (effect: string, index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].effect = effect;
      return newNames;
    });
  }

  const handleActionChoiceChange = (actionChoice: string, index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].actionChoice = actionChoice;
      return newNames;
    });
  }

  const removeNameForm = (index: number) => {
    setNames((prevNames) => prevNames.filter((_, i) => i !== index));
  };

  useEffect(() => {
    
    const generatedText = names
      .map(({ name, description, targetIds, statements, effect, actionChoice, resources }) => {
        return `
    ${name}SCP:
      Type: AWS::Organizations::Policy
      Properties:    
        TargetIds: [${targetIds.map((id) => `"${id}"`).join(', ')}]
        Name: ${name}
        Description: ${description}
        Type: SERVICE_CONTROL_POLICY
        Content: >-
          {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": ${effect ? `"${effect}"` : `"Deny"`},
                  ${actionChoice ? `"${actionChoice}"` : `"Action"`}: [${statements.map((statement) => `"${statement}"`).join(',\n                        ')}],
                  "Resource": [${resources.length > 0 ? resources.map((resource) => `"${resource}"`).join(',\n                        ') : '"*"'}]
              }
            ]
          }`;
      })
      .join('');

    setConcatenatedPoliciesCloudformation(generatedText);
  }, [names]);

  useEffect(() => {
    
    const generatedTerraform = names
      .map(({ name, description, statements, effect, actionChoice, resources }) => {
        return `\ndata "aws_iam_policy_document" "${name}" {
statement {
  effect    = ${effect ? `"${effect}"` : `"Deny"`}
  ${actionChoice === 'NotAction' ? 'not_actions' : 'actions'}   = [${statements.map((statement) => `"${statement}"`).join(',\n              ')}]
  resources = [${resources.length > 0 ? resources.map((resource) => `"${resource}"`).join(',\n              ') : '"*"'}]
  }
}

resource "aws_organizations_policy" "example" {
name        = "${name}"
content     = data.aws_iam_policy_document.${name}.json
description = "${description}"
type        = "SERVICE_CONTROL_POLICY"
}`;
      })
      .join('');

    setConcatenatedPoliciesTerraform(generatedTerraform);
  }, [names]);

  const addNameForm = () => {
    setNames((prevNames) => [...prevNames, { name: '', description: '', targetIds: [], services: [], actions: [], statements: [], effect: '', actionChoice: '', resources: [], conditions: []}]);
  };

  return (
    <Container className='App'>
      <Header className='navbar' />
      <Container maxW="container.xl" p={4} display="flex">
        <div className='left-column'>
          <Tabs isFitted>
            <TabList mb="1em">
              {names.map((_, index) => (
                <Tab key={index}>
                  Policy {index + 1}
                  <IconButton aria-label="Close" fontSize="10px" icon={<CloseIcon />} onClick={() => removeNameForm(index)} ml={5} />
                </Tab>
              ))}
              <Tab onClick={addNameForm}><AddIcon /></Tab>
            </TabList>
            <TabPanels>
              {names.map((nameObj, index) => (
                <TabPanel key={index}>
                  <VStack spacing={4} align="left">
                    <PolicyForm
                      onNameChange={(newName) => handleNameChange(newName, index)}
                      onDescriptionChange={(newDescription) => handleDescriptionChange(newDescription, index)}
                      onTargetIdsChange={(newTargetIds) => handleTargetIdsChange(newTargetIds, index)}
                      onServicesChange={(newServices) => handleServicesChange(newServices, index)}
                      onActionsChange={(newActions) => handleActionsChange(newActions, index)}
                      onStatementsChange={(newStatements) => handleStatementsChange(newStatements, index)}
                      onEffectChange={(newEffect) => handleEffectChange(newEffect, index)}
                      onActionChoiceChange={(newActionChoice) => handleActionChoiceChange(newActionChoice, index)}
                      onResourcesChange={(newResources) => handleResourcesChange(newResources, index)}
                      onConditionsChange={(newConditions) => handleConditionsChange(newConditions, index)}
                    />
                  </VStack>
                </TabPanel>
              ))}
            </TabPanels>
          </Tabs>
        </div>
        
        <div className='right-column'>
          <Tabs isFitted>
            <TabList mb="1em" >
                <Tab>
                  Cloudformation
                </Tab>
                <Tab>
                  Terraform
                </Tab>
              
            </TabList>
            <TabPanels>
                <TabPanel >
                  <Box className='right-column-box terraform-box'>
                    <CopyBlock
                      {...{ showLineNumbers }}
                      text={concatenatedCloudformation}
                      theme={a11yDark}
                      language="terraform"
                      customStyle={{
                        overflowY: 'scroll',
                        borderRadius: '5px',
                        boxShadow: '1px 2px 3px rgba(0,0,0,0.35)',
                        fontSize: '0.9rem',
                        margin: '0px 0.75rem',
                      }}
                    />
                  </Box>
                </TabPanel>
                <TabPanel >
                  <Box className='right-column-box terraform-box'>
                    <CopyBlock
                      {...{ showLineNumbers }}
                      text={concatenatedPoliciesTerraform}
                      theme={a11yDark}
                      language="terraform"
                      customStyle={{
                        overflowY: 'scroll',
                        borderRadius: '5px',
                        boxShadow: '1px 2px 3px rgba(0,0,0,0.35)',
                        fontSize: '0.9rem',
                        margin: '0px 0.75rem',
                      }}
                    />
                  </Box>
                </TabPanel>
            </TabPanels>
          </Tabs>
          
        </div>
      </Container>
    </Container>
    
      
  );
};

export default App;



