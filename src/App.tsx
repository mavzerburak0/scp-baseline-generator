import { useState, useEffect } from 'react'
import './App.css'
import PolicyForm from './components/PolicyForm';
import {
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  VStack,
  Container,
  IconButton,
} from '@chakra-ui/react';
import { CloseIcon, AddIcon } from '@chakra-ui/icons';
import Header from './components/Navbar';



const App: React.FC = () => {
  const [names, setNames] = useState<{ name: string; description: string; targetIds: string[]; services: string[], actions: string[], statements: string[], effect: string }[]>([
    { name: '', description: '', targetIds: [], services: [], actions: [], statements: [], effect: ''},
  ]);
  const [concatenatedPolicies, setConcatenatedPolicies] = useState<string>('');
  const [preWritten] = useState<string>(`
AWSTemplateFormatVersion: '2010-09-09'
Description: "Generated by SCP Baseline Generator"

Resources:`);
  
    

  const handleNameChange = (name: string, index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].name = name;
      return newNames;
    });
  };

  const handleDescriptionChange = (description: string, index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].description = description;
      return newNames;
    });
  };

  const handleTargetIdsChange = (targetIds: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].targetIds = targetIds;
      return newNames;
    });
  };

  const handleServicesChange = (services: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].services = services;
      return newNames;
    });
  };

  const handleActionsChange = (actions: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].actions = actions;
      return newNames;
    });
  };

  const handleStatementsChange = (statements: string[], index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].statements = statements;
      return newNames;
    });
  }

  const handleEffectChange = (effect: string, index: number) => {
    setNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index].effect = effect;
      return newNames;
    });
  }

  const removeNameForm = (index: number) => {
    setNames((prevNames) => prevNames.filter((_, i) => i !== index));
  };

  useEffect(() => {
    
    const generatedText = names
      .map(({ name, description, targetIds, statements, effect }) => {
        console.log("STATEMENTS");
        console.log(statements);
        return `
    ${name}SCP:
      Type: AWS::Organizations::Policy
      Properties:    
        TargetIds: [${targetIds.map((id) => `"${id}"`).join(', ')}]
        Name: ${name}
        Description: ${description}
        Type: SERVICE_CONTROL_POLICY
        Content: >-
          {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": ${effect ? `"${effect}"` : `"Deny"`},
                  "Action": [${statements.map((statement) => `"${statement}"`).join(',\n                        ')}
                  ],
                  "Resource": "*"
              }
            ]
          }`;
      })
      .join('');

    setConcatenatedPolicies(generatedText);
  }, [names]);

  const addNameForm = () => {
    setNames((prevNames) => [...prevNames, { name: '', description: '', targetIds: [], services: [], actions: [], statements: [], effect: ''}]);
  };

  return (
    <Container className='App'>
      <Header className='navbar' />
      <Container maxW="container.xl" p={4} display="flex">
        <div className='left-column'>
          <Tabs isFitted>
            <TabList mb="1em">
              {names.map((_, index) => (
                <Tab key={index}>
                  Policy {index + 1}
                  <IconButton aria-label="Close" fontSize="10px" icon={<CloseIcon />} onClick={() => removeNameForm(index)} ml={5} />
                </Tab>
              ))}
              <Tab onClick={addNameForm}><AddIcon /></Tab>
            </TabList>
            <TabPanels>
              {names.map((nameObj, index) => (
                <TabPanel key={index}>
                  <VStack spacing={4} align="left">
                    <PolicyForm
                      onNameChange={(newName) => handleNameChange(newName, index)}
                      onDescriptionChange={(newDescription) => handleDescriptionChange(newDescription, index)}
                      onTargetIdsChange={(newTargetIds) => handleTargetIdsChange(newTargetIds, index)}
                      onServicesChange={(newServices) => handleServicesChange(newServices, index)}
                      onActionsChange={(newActions) => handleActionsChange(newActions, index)}
                      onStatementsChange={(newStatements) => handleStatementsChange(newStatements, index)}
                      onEffectChange={(newEffect) => handleEffectChange(newEffect, index)}
                    />
                  </VStack>
                </TabPanel>
              ))}
              <TabPanel>
                {/* Additional content for the new tab (if needed) */}
              </TabPanel>
            </TabPanels>
          </Tabs>
        </div>
        
        <div className='right-column'>
          <pre>
              {preWritten}
              {concatenatedPolicies}
            
          </pre>
        </div>
      </Container>
    </Container>
    
      
  );
};

export default App;



